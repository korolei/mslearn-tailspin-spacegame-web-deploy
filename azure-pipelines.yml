trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release'

schedules:
- cron: '0 3 * * *'
  displayName: Deploy every day at 3 A.M.
  branches:
    include:
    - release
  always: true 

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-18.04'
      demands:
      - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '3.1.300'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
    )
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameDev)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

              
- stage: 'Test'
  displayName: 'Deploy to the test environment'
  dependsOn: Dev
  #condition: eq(variables['Build.Reason'], 'Schedule')
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: test
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameTest)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
          - task: WhiteSource Bolt@20

- stage: 'Staging'
  displayName: 'Deploy to the staging environment'
  dependsOn: Test
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: staging
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameStaging)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
          - task: owaspzap@1
            displayName: 'OWASP ZAP'
            inputs:
              scantype: 'targetedScan'
              threshold: '75'
              url: 'https://tailspin-space-game-web-staging-22667.azurewebsites.net'
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Zap Report'
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)/owaspzap'
              artifactName: 'Zap Report'


          - bash: |
              sudo npm install -g handlebars-cmd

              cat <<EOF > owaspzap/nunit-template.hbs
              {{#each site}}

              <test-run
                  id="2"
                  name="Owasp test"
                  start-time="{{../[@generated]}}"  >
                  <test-suite
                      id="{{@index}}"
                      type="Assembly"
                      name="{{[@name]}}"
                      result="Failed"
                      failed="{{alerts.length}}">
                      <attachments>
                          <attachment>
                              <filePath>$(Build.SourcesDirectory)/owaspzap/report.html</filePath>
                          </attachment>
                      </attachments>
                  {{#each alerts}}<test-case
                      id="{{@index}}"
                      name="{{alert}}"
                      result="Failed"
                      fullname="{{alert}}"
                      time="1">
                          <failure>
                              <message>
                                  <![CDATA[{{{desc}}}]]>
                              </message>
                              <stack-trace>
                                  <![CDATA[
              Solution:
              {{{solution}}}

              Reference:
              {{{reference}}}

              instances:{{#each instances}}
              * {{uri}}
                  - {{method}}
                  {{#if evidence}}- {{{evidence}}}{{/if}}
                                  {{/each}}]]>
                              </stack-trace>
                          </failure>
                  </test-case>
                  {{/each}}
                  </test-suite>
              </test-run>
              {{/each}}
              EOF
            displayName: 'owasp nunit template'
            condition: always()

          - bash: ' handlebars owaspzap/report.json < owaspzap/nunit-template.hbs > owaspzap/test-results.xml'
            displayName: 'generate nunit type file'
            condition: always()

          - task: PublishTestResults@2
            displayName: 'Publish Test Results **/TEST-*.xml'
            inputs:
              testResultsFormat: NUnit
              testResultsFiles: 'owaspzap/test-results.xml'
            condition: always()